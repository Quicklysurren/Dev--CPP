MFC에서 사각형, 타원, 글씨에 다른 3가지 추가하기

// MFCApplication4View.cpp: CMFCApplication4View 클래스의 구현
//

#include "pch.h"
#include "framework.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "MFCApplication4.h"
#endif

#include "MFCApplication4Doc.h"
#include "MFCApplication4View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMFCApplication4View

IMPLEMENT_DYNCREATE(CMFCApplication4View, CView)

BEGIN_MESSAGE_MAP(CMFCApplication4View, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &CView::OnFilePrintPreview)
	ON_WM_MOUSEMOVE()
END_MESSAGE_MAP()

// CMFCApplication4View 생성/소멸

CMFCApplication4View::CMFCApplication4View() noexcept
{
	// TODO: 여기에 생성 코드를 추가합니다.

}

CMFCApplication4View::~CMFCApplication4View()
{
}

BOOL CMFCApplication4View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// CMFCApplication4View 그리기
CPoint pnt; // pnt.x pnt.y

void CMFCApplication4View::OnDraw(CDC* pDC)
{
	CMFCApplication4Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// 배경을 흰색으로 설정
	pDC->FillSolidRect(0, 0, 1000, 1000, RGB(255, 255, 255));

	// 사각형 그리기
	CBrush brushRect(RGB(255, 0, 0)); // 빨간색 사각형
	pDC->SelectObject(&brushRect);
	pDC->Rectangle(pnt.x - 60, pnt.y - 60, pnt.x + 60, pnt.y + 60);

	// 삼각형 그리기
	POINT trianglePoints[3] = { {pnt.x, pnt.y - 60}, {pnt.x - 60, pnt.y + 60}, {pnt.x + 60, pnt.y + 60} };
	CBrush brushTri(RGB(0, 0, 255)); // 파란색 삼각형
	pDC->SelectObject(&brushTri);
	pDC->Polygon(trianglePoints, 3);

	// 원 그리기
	CBrush brushEllipse(RGB(0, 255, 0)); // 초록색 원
	pDC->SelectObject(&brushEllipse);
	pDC->Ellipse(pnt.x - 50, pnt.y - 50, pnt.x + 50, pnt.y + 50);

	// 직선 그리기
	CPen penLine(PS_SOLID, 3, RGB(255, 0, 255)); // 자홍색 선
	pDC->SelectObject(&penLine);
	pDC->MoveTo(pnt.x - 50, pnt.y);
	pDC->LineTo(pnt.x + 50, pnt.y);

	// 텍스트 그리기
	LOGFONT lf;
	CFont font;
	::ZeroMemory(&lf, sizeof(LOGFONT));
	lf.lfHeight = 20;
	wcscpy_s(lf.lfFaceName, _T("Arial"));
	font.CreateFontIndirectW(&lf);
	pDC->SelectObject(&font);
	pDC->SetTextColor(RGB(0, 0, 0)); // 검은색 텍스트
	pDC->TextOutW(pnt.x - 45, pnt.y - 10, L"Hello ANU");
}


// CMFCApplication4View 인쇄

BOOL CMFCApplication4View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void CMFCApplication4View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void CMFCApplication4View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}


// CMFCApplication4View 진단

#ifdef _DEBUG
void CMFCApplication4View::AssertValid() const
{
	CView::AssertValid();
}

void CMFCApplication4View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CMFCApplication4Doc* CMFCApplication4View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CMFCApplication4Doc)));
	return (CMFCApplication4Doc*)m_pDocument;
}
#endif //_DEBUG


// CMFCApplication4View 메시지 처리기


void CMFCApplication4View::OnMouseMove(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	pnt = point;
	Invalidate(true);
	CView::OnMouseMove(nFlags, point);
}
